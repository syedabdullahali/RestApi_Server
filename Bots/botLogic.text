const { handaleBotBid } = require("./botFunction");

let startTestTime = new Date(); // Initial contest start time
startTestTime; 
const fillBotSlots = async (el,botUserList) => {
    const botList = JSON.parse(JSON.stringify(botUserList))
    const contest = {
        "contestDuration": 40, // Contest duration in minutes (40 minutes)
        "startTime": startTestTime, 
        "realUserSlots": 20, // Slots filled by real users
        "bots": [], // Array to hold bids
        "botSlots": el.userTypeCounts.botCount, // Count of slots filled by bots,
        "upToBids":el.userTypeCounts.userCount,
        "contestId":el._id,
        "timeSlotId":`${el.currentTimeSlot._id.toString()}`,
        "bidRange":100,   
        "contestHsitoryId":el.contesthistories._id
    };
    // console.log(el.currentTimeSlot)
    // console.log("Contest Start Time:", startTestTime);
    const totalSlots = el.slots; // Total slots availablelimiy 

    // Bots bids limit will calculate according to slot and slot bids limit 

    const botPercentageFirstPortion = 0.20; // 20% of slots filled by bots in first portion
    const remainingSlotPercentage = 0.80; // Remaining 80% for real users and bots

    // Divide contest time into 4 portions
    const portionTime = contest.contestDuration / 4; // 40 minutes divided into 4 portions (each 10 minutes)
    const startTime = contest.startTime;
    
    // Simulating current time (adjust as needed for testing)
    const currentTime = new Date(); // Change this to test different portions

    currentTime.setMinutes(startTestTime.getMinutes()+5)

    // console.log("Current Time:", currentTime.toLocaleTimeString(),startTime.toLocaleTimeString());

    // console.log(currentTime - startTime < (portionTime * 60000))
    // First Portion: Fill 20% of slots by bots
    if (currentTime - startTime < (portionTime * 60000)) {
        const slotsToFill = totalSlots * botPercentageFirstPortion; // 20% of slots
        await placeBids(contest, slotsToFill, 'bot',botList); // Place the bot bids
        // console.log("First Portion: Filled slots by bots:", slotsToFill);
    }

    // Second Portion: No bot participation
    if (currentTime - startTime >= (portionTime * 60000) && currentTime - startTime < (portionTime * 2 * 60000)) {
        console.log("Second Portion: No bot bids");
    }

    // Third Portion: Fill half of remaining slots by bots
    if (currentTime - startTime >= (portionTime * 2 * 60000) && currentTime - startTime < (portionTime * 3 * 60000)) {
        const filledSlots = contest.realUserSlots + contest.botSlots; // Real users and bots combined
        const remainingSlots = totalSlots - filledSlots; // Calculate remaining slots
        const slotsToFillThirdPortion = (remainingSlotPercentage * totalSlots - contest.realUserSlots) * (2 / 4); // 50% of remaining slots
        await placeBids(contest, slotsToFillThirdPortion, 'bot',botList); // Place bot bids
        // console.log("Third Portion: Filled slots by bots:", slotsToFillThirdPortion);
    }

    // Fourth Portion: Fill remaining slots based on real user participation
    if (currentTime - startTime >= (portionTime * 3 * 60000)) {
        const filledSlots = contest.realUserSlots + contest.botSlots; // Real users and bots combined
        const remainingSlots = totalSlots - filledSlots; // Calculate remaining slots
        if (remainingSlots > 0) {
            await placeBids(contest, remainingSlots, 'bot',botList); // Place remaining bot bids
            // console.log("Fourth Portion: Filled remaining slots by bots:", remainingSlots);
        }
    }

    return contest;
};

// Function to place bids (bot or real user)
const placeBids = async (contest, slotsToFill, userType,botList) => {

    // for (let i = 0; i < slotsToFill; i++) {
    //     // const bid = {
    //     //     // userType,
    //     //     // bidAmount: Math.random() * 100, // Random bid amount for bots
    //     //     // bidTime: new Date(), // Current time for bid placement
    //     //     // userId: userType === 'bot' ? null : "RealUserId" // Null for bots, otherwise real user ID
    //     //     ...botUserList[(Math.random()*botUserList.length)+1]
    //     // };
    //     const bid ={
    //         botInfo:botList[Math.floor(Math.random()*botList.length)+1],
    //         bidInfo:{
    //             botList:Math.floor(Math.random() * contest.bidRange)+1
    //         }
    //     }



    //     contest.bots.push(bid); // Add the bid to the contest bids array
    // }
    contest.bots = contest.bots.concat(handaleBotBid(botList,contest.upToBids,slotsToFill,contest.bidRange))

    // contest.botSlots += slotsToFill; // Increment bot slot count
    // await contest.save(); // Save the contest (if using a database)
    

   
};




// Call the function to test
module.exports = fillBotSlots;
